Traceback (most recent call last):
  File "/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import taxcalc as tc


class Calculator(tc.Calculator):
    """
    Customized Calculator class that inherits all tc.Calculator data and
    methods, adding or overriding some to get the desired customization.
    """
    def __init__(self, policy=None, records=None, verbose=False,
                 sync_years=True, consumption=None,
                 # above are the tc.Calculator constructor arguments
                 # below is new constructor argument used in customization
                 colr_active=False):
        # call the parent class constructor
        super().__init__(policy=policy, records=records,
                         verbose=verbose, sync_years=sync_years,
                         consumption=consumption)
        # remember whether pseudo_COLR policy is active or not
        self.colr_active = colr_active
        # declare colr_param dictionary that will contain pseudo COLR policy
        self.colr_param = dict()

    def specify_pseudo_colr_policy(self):
        """
        Specify policy parameters for the COLR policy in the current_year.
        See use of these parameters below in the pseudo_colr_amount method.
        """
        # reform implementation year
        reform_year = 2020
        # specify dictionary of parameter names and values for reform_year
        self.colr_param = {
            # credit phase-in rate on earnings
            'COLR_rt': 1.0,
            # ceiling on refundable credit varies by filing-unit type, MARS
            'COLR_c': np.array([4000, 8000, 4000, 4000, 4000],
                               dtype=np.float64),
            # credit phase-out start AGI level varies by filing-unit type, MARS
            'COLR_ps': np.array([30000, 50000, 30000, 30000, 30000],
                                dtype=np.float64),
            # credit phase-out rate per dollar of AGI above COLR_ps level
            'COLR_prt': 0.2
        }
        # set pseudo COLR parameter values for current year
        this_year = self.current_year
        if self.colr_active and this_year >= reform_year:
            # set inflation-indexed values of COLR_c and COLR_ps for this year
            irates = self.__policy.inflation_rates()
            syr = tc.Policy.JSON_START_YEAR
            for name in ['COLR_c', 'COLR_ps']:
                value = self.colr_param[name]
                for year in range(reform_year, this_year):
                    value *= (1.0 + irates[year - syr])
                self.colr_param[name] = np.round(value, 2)  # to nearest penny
        else:  # if policy not active or if this year is before the reform year
            # set ceiling to zero
            self.colr_param['COLR_c'] = np.array([0.0, 0.0, 0.0, 0.0, 0.0],
                                                 dtype=np.float64)
        tracing = False  # set to True to see parameter values for this year
        if tracing:
            for name in self.colr_param:
                print('> {} {} {}'.format(
                    this_year, name, self.colr_param[name]
                ))

    def pseudo_colr_amount(self):
        """
        Calculate pseudo Cost-of-Living Refund amount.
        Note this is simply meant to illustrate a Python programming technique;
        this function does NOT calculate an exact Cost-of-Living Refund amount.
        See setting of parameters above in specify_pseudo_COLR_policy method.
        """
        recs = self.__records
        # create MARS-specific policy parameter arrays
        mars_indicators = [recs.MARS == 1, recs.MARS == 2, recs.MARS == 3,
                           recs.MARS == 4, recs.MARS == 5]
        colr_c = np.select(mars_indicators, self.colr_param['COLR_c'])
        colr_ps = np.select(mars_indicators, self.colr_param['COLR_ps'])
        colr_rt = self.colr_param['COLR_rt']
        colr_prt = self.colr_param['COLR_prt']
        # compute colr_amt
        amt_pre_phaseout = np.minimum(recs.e00200 * colr_rt, colr_c)
        phaseout = np.maximum((recs.c00100 - colr_ps) * colr_prt, 0.)
        colr_amt = np.maximum(amt_pre_phaseout - phaseout, 0.)
        setattr(recs, 'colr_amount', colr_amt)
        # reduce income and combined taxes because COLR is a refundable credit
        recs.iitax -= colr_amt
        recs.combined -= colr_amt
        # delete local arrays used only in this method
        del mars_indicators
        del colr_c
        del colr_ps
        del amt_pre_phaseout
        del phaseout
        del colr_amt

    def calc_all(self, zero_out_calc_vars=False):
        """
        Call all tax-calculation functions for the current_year.
        """
        tc.BenefitPrograms(self)
        self._calc_one_year(zero_out_calc_vars)
        tc.BenefitSurtax(self)
        tc.BenefitLimitation(self)
        tc.FairShareTax(self.__policy, self.__records)
        tc.LumpSumTax(self.__policy, self.__records)
        # specify new method to set pseudo COLR policy parameters
        self.specify_pseudo_colr_policy()  # (see above)
        # call new method to calculate pseudo COLR amount
        self.pseudo_colr_amount()  # (see above)
        tc.ExpandIncome(self.__policy, self.__records)
        tc.AfterTaxIncome(self.__policy, self.__records)

# end of customized Calculator class definition


# top-level logic of program that uses customized Calculator class

policy1 = tc.Policy()  # baseline policy is current-law policy
policy2 = tc.Policy()  # parametric reform, reformC.json, eliminates EITC

# TODO: Move to the web so this can be done standalone.
policy2.implement_reform(tc.Policy.read_json_reform('github://PSLmodels:Tax-Calculator@master/docs/recipes/_static/reformC.json'))

# specify customized Calculator objects for baseline and reform:
#   baseline calc1 uses policy1 (current-law) and colr_active=False
#   reform calc2 uses policy2 (no EITC) and colr_active=True
cps_records = tc.Records.cps_constructor()
calc1 = Calculator(policy=policy1, records=cps_records, colr_active=False)
calc2 = Calculator(policy=policy2, records=cps_records, colr_active=True)

# calculate tax liabilities for years around the reform year
CYR_FIRST = 2019
CYR_LAST = 2022
for cyr in range(CYR_FIRST, CYR_LAST + 1):
    # advance to and calculate for specified cyr
    calc1.advance_to_year(cyr)
    calc1.calc_all()
    calc2.advance_to_year(cyr)
    calc2.calc_all()
    # tabulate weighted amounts
    funits = calc1.total_weight()
    itax1 = calc1.weighted_total('iitax')
    itax2 = calc2.weighted_total('iitax')
    eitc1 = calc1.weighted_total('eitc')
    eitc2 = calc2.weighted_total('eitc')
    colr1 = calc1.weighted_total('colr_amount')
    colr2 = calc2.weighted_total('colr_amount')
    # print weighted amounts for cyr
    if cyr == CYR_FIRST:
        print('YEAR  UNITS   ITAX1   ITAX2  EITC1  EITC2  COLR1  COLR2')
    line = '{}  {:.1f}  {:.1f}  {:.1f}  {:5.1f}  {:5.1f}  {:5.1f}  {:5.1f}'
    print(line.format(cyr, funits * 1e-6,
                      itax1 * 1e-9, itax2 * 1e-9,
                      eitc1 * 1e-9, eitc2 * 1e-9,
                      colr1 * 1e-9, colr2 * 1e-9))
------------------


[31m---------------------------------------------------------------------------[39m
[31mHTTPError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 123[39m
[32m    120[39m policy2 = tc.Policy()  [38;5;66;03m# parametric reform, reformC.json, eliminates EITC[39;00m
[32m    122[39m [38;5;66;03m# TODO: Move to the web so this can be done standalone.[39;00m
[32m--> [39m[32m123[39m policy2.implement_reform([43mtc[49m[43m.[49m[43mPolicy[49m[43m.[49m[43mread_json_reform[49m[43m([49m[33;43m'[39;49m[33;43mgithub://PSLmodels:Tax-Calculator@master/docs/recipes/_static/reformC.json[39;49m[33;43m'[39;49m[43m)[49m)
[32m    125[39m [38;5;66;03m# specify customized Calculator objects for baseline and reform:[39;00m
[32m    126[39m [38;5;66;03m#   baseline calc1 uses policy1 (current-law) and colr_active=False[39;00m
[32m    127[39m [38;5;66;03m#   reform calc2 uses policy2 (no EITC) and colr_active=True[39;00m
[32m    128[39m cps_records = tc.Records.cps_constructor()

[36mFile [39m[32m~/work/Tax-Calculator/Tax-Calculator/taxcalc/policy.py:168[39m, in [36mPolicy.read_json_reform[39m[34m(obj)[39m
[32m    160[39m [38;5;129m@staticmethod[39m
[32m    161[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mread_json_reform[39m(obj):
[32m    162[39m [38;5;250m    [39m[33;03m"""[39;00m
[32m    163[39m [33;03m    Return a reform dictionary suitable for use with implement_reform[39;00m
[32m    164[39m [33;03m    method generated from the specified JSON object, which can be None or[39;00m
[32m    165[39m [33;03m    a string containing a local filename, a URL beginning with 'http'[39;00m
[32m    166[39m [33;03m    pointing to a valid JSON file hosted online, or a valid JSON text.[39;00m
[32m    167[39m [33;03m    """[39;00m
[32m--> [39m[32m168[39m     [38;5;28;01mreturn[39;00m [43mParameters[49m[43m.[49m[43m_read_json_revision[49m[43m([49m[43mobj[49m[43m,[49m[43m [49m[33;43m'[39;49m[33;43mpolicy[39;49m[33;43m'[39;49m[43m)[49m

[36mFile [39m[32m~/work/Tax-Calculator/Tax-Calculator/taxcalc/parameters.py:759[39m, in [36mParameters._read_json_revision[39m[34m(obj, topkey)[39m
[32m    756[39m [38;5;28;01mif[39;00m obj [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m    757[39m     [38;5;28;01mreturn[39;00m {}
[32m--> [39m[32m759[39m full_dict = [43mparamtools[49m[43m.[49m[43mread_json[49m[43m([49m[43mobj[49m[43m)[49m
[32m    761[39m [38;5;66;03m# check top-level key contents of dictionary[39;00m
[32m    762[39m [38;5;28;01mif[39;00m topkey [38;5;129;01min[39;00m full_dict.keys():

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/paramtools/utils.py:105[39m, in [36mread_json[39m[34m(params_or_path, storage_options)[39m
[32m     89[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mread_json[39m(
[32m     90[39m     params_or_path: FileDictStringLike,
[32m     91[39m     storage_options: Optional[Dict[[38;5;28mstr[39m, Any]] = [38;5;28;01mNone[39;00m,
[32m     92[39m ):
[32m     93[39m [38;5;250m    [39m[33;03m"""[39;00m
[32m     94[39m [33;03m    Read JSON data of the form:[39;00m
[32m     95[39m [33;03m    - Dict.[39;00m
[32m   (...)[39m[32m    103[39m 
[32m    104[39m [33;03m    """[39;00m
[32m--> [39m[32m105[39m     res = [43m_read[49m[43m([49m[43mparams_or_path[49m[43m,[49m[43m [49m[43mstorage_options[49m[43m)[49m
[32m    106[39m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(res, [38;5;28mstr[39m):
[32m    107[39m         [38;5;28;01mtry[39;00m:

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/paramtools/utils.py:50[39m, in [36m_read[39m[34m(params_or_path, storage_options)[39m
[32m     47[39m         [38;5;28;01mreturn[39;00m f.read()
[32m     49[39m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(params_or_path, [38;5;28mstr[39m) [38;5;129;01mand[39;00m _is_url(params_or_path):
[32m---> [39m[32m50[39m     [38;5;28;01mwith[39;00m [43mfsspec[49m[43m.[49m[43mopen[49m[43m([49m[43mparams_or_path[49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mr[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43m([49m[43mstorage_options[49m[43m [49m[38;5;129;43;01mor[39;49;00m[43m [49m[43m{[49m[43m}[49m[43m)[49m[43m)[49m [38;5;28;01mas[39;00m f:
[32m     51[39m         [38;5;28;01mreturn[39;00m f.read()
[32m     53[39m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(params_or_path, [38;5;28mstr[39m):

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/fsspec/core.py:491[39m, in [36mopen[39m[34m(urlpath, mode, compression, encoding, errors, protocol, newline, expand, **kwargs)[39m
[32m    433[39m [38;5;250m[39m[33;03m"""Given a path or paths, return one ``OpenFile`` object.[39;00m
[32m    434[39m 
[32m    435[39m [33;03mParameters[39;00m
[32m   (...)[39m[32m    488[39m [33;03m  https://filesystem-spec.readthedocs.io/en/latest/api.html#other-known-implementations[39;00m
[32m    489[39m [33;03m"""[39;00m
[32m    490[39m expand = DEFAULT_EXPAND [38;5;28;01mif[39;00m expand [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m expand
[32m--> [39m[32m491[39m out = [43mopen_files[49m[43m([49m
[32m    492[39m [43m    [49m[43murlpath[49m[43m=[49m[43m[[49m[43murlpath[49m[43m][49m[43m,[49m
[32m    493[39m [43m    [49m[43mmode[49m[43m=[49m[43mmode[49m[43m,[49m
[32m    494[39m [43m    [49m[43mcompression[49m[43m=[49m[43mcompression[49m[43m,[49m
[32m    495[39m [43m    [49m[43mencoding[49m[43m=[49m[43mencoding[49m[43m,[49m
[32m    496[39m [43m    [49m[43merrors[49m[43m=[49m[43merrors[49m[43m,[49m
[32m    497[39m [43m    [49m[43mprotocol[49m[43m=[49m[43mprotocol[49m[43m,[49m
[32m    498[39m [43m    [49m[43mnewline[49m[43m=[49m[43mnewline[49m[43m,[49m
[32m    499[39m [43m    [49m[43mexpand[49m[43m=[49m[43mexpand[49m[43m,[49m
[32m    500[39m [43m    [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m,[49m
[32m    501[39m [43m[49m[43m)[49m
[32m    502[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m out:
[32m    503[39m     [38;5;28;01mraise[39;00m [38;5;167;01mFileNotFoundError[39;00m(urlpath)

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/fsspec/core.py:295[39m, in [36mopen_files[39m[34m(urlpath, mode, compression, encoding, errors, name_function, num, protocol, newline, auto_mkdir, expand, **kwargs)[39m
[32m    216[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mopen_files[39m(
[32m    217[39m     urlpath,
[32m    218[39m     mode=[33m"[39m[33mrb[39m[33m"[39m,
[32m   (...)[39m[32m    228[39m     **kwargs,
[32m    229[39m ):
[32m    230[39m [38;5;250m    [39m[33;03m"""Given a path or paths, return a list of ``OpenFile`` objects.[39;00m
[32m    231[39m 
[32m    232[39m [33;03m    For writing, a str path must contain the "*" character, which will be filled[39;00m
[32m   (...)[39m[32m    293[39m [33;03m      https://filesystem-spec.readthedocs.io/en/latest/api.html#other-known-implementations[39;00m
[32m    294[39m [33;03m    """[39;00m
[32m--> [39m[32m295[39m     fs, fs_token, paths = [43mget_fs_token_paths[49m[43m([49m
[32m    296[39m [43m        [49m[43murlpath[49m[43m,[49m
[32m    297[39m [43m        [49m[43mmode[49m[43m,[49m
[32m    298[39m [43m        [49m[43mnum[49m[43m=[49m[43mnum[49m[43m,[49m
[32m    299[39m [43m        [49m[43mname_function[49m[43m=[49m[43mname_function[49m[43m,[49m
[32m    300[39m [43m        [49m[43mstorage_options[49m[43m=[49m[43mkwargs[49m[43m,[49m
[32m    301[39m [43m        [49m[43mprotocol[49m[43m=[49m[43mprotocol[49m[43m,[49m
[32m    302[39m [43m        [49m[43mexpand[49m[43m=[49m[43mexpand[49m[43m,[49m
[32m    303[39m [43m    [49m[43m)[49m
[32m    304[39m     [38;5;28;01mif[39;00m fs.protocol == [33m"[39m[33mfile[39m[33m"[39m:
[32m    305[39m         fs.auto_mkdir = auto_mkdir

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/fsspec/core.py:667[39m, in [36mget_fs_token_paths[39m[34m(urlpath, mode, num, name_function, storage_options, protocol, expand)[39m
[32m    665[39m     inkwargs[[33m"[39m[33mfo[39m[33m"[39m] = urls
[32m    666[39m paths, protocol, _ = chain[[32m0[39m]
[32m--> [39m[32m667[39m fs = [43mfilesystem[49m[43m([49m[43mprotocol[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43minkwargs[49m[43m)[49m
[32m    668[39m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(urlpath, ([38;5;28mlist[39m, [38;5;28mtuple[39m, [38;5;28mset[39m)):
[32m    669[39m     pchains = [
[32m    670[39m         _un_chain(stringify_path(u), storage_options [38;5;129;01mor[39;00m {})[[32m0[39m] [38;5;28;01mfor[39;00m u [38;5;129;01min[39;00m urlpath
[32m    671[39m     ]

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/fsspec/registry.py:322[39m, in [36mfilesystem[39m[34m(protocol, **storage_options)[39m
[32m    315[39m     warnings.warn(
[32m    316[39m         [33m"[39m[33mThe [39m[33m'[39m[33marrow_hdfs[39m[33m'[39m[33m protocol has been deprecated and will be [39m[33m"[39m
[32m    317[39m         [33m"[39m[33mremoved in the future. Specify it as [39m[33m'[39m[33mhdfs[39m[33m'[39m[33m.[39m[33m"[39m,
[32m    318[39m         [38;5;167;01mDeprecationWarning[39;00m,
[32m    319[39m     )
[32m    321[39m [38;5;28mcls[39m = get_filesystem_class(protocol)
[32m--> [39m[32m322[39m [38;5;28;01mreturn[39;00m [38;5;28;43mcls[39;49m[43m([49m[43m*[49m[43m*[49m[43mstorage_options[49m[43m)[49m

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/fsspec/spec.py:81[39m, in [36m_Cached.__call__[39m[34m(cls, *args, **kwargs)[39m
[32m     79[39m     [38;5;28;01mreturn[39;00m [38;5;28mcls[39m._cache[token]
[32m     80[39m [38;5;28;01melse[39;00m:
[32m---> [39m[32m81[39m     obj = [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[43m.[49m[34;43m__call__[39;49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m     82[39m     [38;5;66;03m# Setting _fs_token here causes some static linters to complain.[39;00m
[32m     83[39m     obj._fs_token_ = token

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/fsspec/implementations/github.py:66[39m, in [36mGithubFileSystem.__init__[39m[34m(self, org, repo, sha, username, token, timeout, **kwargs)[39m
[32m     63[39m     sha = r.json()[[33m"[39m[33mdefault_branch[39m[33m"[39m]
[32m     65[39m [38;5;28mself[39m.root = sha
[32m---> [39m[32m66[39m [38;5;28;43mself[39;49m[43m.[49m[43mls[49m[43m([49m[33;43m"[39;49m[33;43m"[39;49m[43m)[49m
[32m     67[39m [38;5;28;01mtry[39;00m:
[32m     68[39m     [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01m.[39;00m[34;01mhttp[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m HTTPFileSystem

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/fsspec/implementations/github.py:175[39m, in [36mGithubFileSystem.ls[39m[34m(self, path, detail, sha, _sha, **kwargs)[39m
[32m    173[39m [38;5;28;01mif[39;00m r.status_code == [32m404[39m:
[32m    174[39m     [38;5;28;01mraise[39;00m [38;5;167;01mFileNotFoundError[39;00m(path)
[32m--> [39m[32m175[39m [43mr[49m[43m.[49m[43mraise_for_status[49m[43m([49m[43m)[49m
[32m    176[39m types = {[33m"[39m[33mblob[39m[33m"[39m: [33m"[39m[33mfile[39m[33m"[39m, [33m"[39m[33mtree[39m[33m"[39m: [33m"[39m[33mdirectory[39m[33m"[39m}
[32m    177[39m out = [
[32m    178[39m     {
[32m    179[39m         [33m"[39m[33mname[39m[33m"[39m: path + [33m"[39m[33m/[39m[33m"[39m + f[[33m"[39m[33mpath[39m[33m"[39m] [38;5;28;01mif[39;00m path [38;5;28;01melse[39;00m f[[33m"[39m[33mpath[39m[33m"[39m],
[32m   (...)[39m[32m    186[39m     [38;5;28;01mif[39;00m f[[33m"[39m[33mtype[39m[33m"[39m] [38;5;129;01min[39;00m types
[32m    187[39m ]

[36mFile [39m[32m/usr/share/miniconda/envs/taxcalc-dev/lib/python3.11/site-packages/requests/models.py:1026[39m, in [36mResponse.raise_for_status[39m[34m(self)[39m
[32m   1021[39m     http_error_msg = (
[32m   1022[39m         [33mf[39m[33m"[39m[38;5;132;01m{[39;00m[38;5;28mself[39m.status_code[38;5;132;01m}[39;00m[33m Server Error: [39m[38;5;132;01m{[39;00mreason[38;5;132;01m}[39;00m[33m for url: [39m[38;5;132;01m{[39;00m[38;5;28mself[39m.url[38;5;132;01m}[39;00m[33m"[39m
[32m   1023[39m     )
[32m   1025[39m [38;5;28;01mif[39;00m http_error_msg:
[32m-> [39m[32m1026[39m     [38;5;28;01mraise[39;00m HTTPError(http_error_msg, response=[38;5;28mself[39m)

[31mHTTPError[39m: 403 Client Error: rate limit exceeded for url: https://api.github.com/repos/PSLmodels/Tax-Calculator/git/trees/master

